// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/biryanim/avito-tech-pvz/internal/service.PVZService -o pvz_service_minimock.go -n PVZServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/biryanim/avito-tech-pvz/internal/model"
	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// PVZServiceMock implements mm_service.PVZService
type PVZServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddProductToReception          func(ctx context.Context, productPVZ *model.ProductPVZ) (pp1 *model.Product, err error)
	funcAddProductToReceptionOrigin    string
	inspectFuncAddProductToReception   func(ctx context.Context, productPVZ *model.ProductPVZ)
	afterAddProductToReceptionCounter  uint64
	beforeAddProductToReceptionCounter uint64
	AddProductToReceptionMock          mPVZServiceMockAddProductToReception

	funcCloseReception          func(ctx context.Context, pvzId uuid.UUID) (rp1 *model.Reception, err error)
	funcCloseReceptionOrigin    string
	inspectFuncCloseReception   func(ctx context.Context, pvzId uuid.UUID)
	afterCloseReceptionCounter  uint64
	beforeCloseReceptionCounter uint64
	CloseReceptionMock          mPVZServiceMockCloseReception

	funcCreatePVZ          func(ctx context.Context, pvz *model.PVZInfo) (pp1 *model.PVZ, err error)
	funcCreatePVZOrigin    string
	inspectFuncCreatePVZ   func(ctx context.Context, pvz *model.PVZInfo)
	afterCreatePVZCounter  uint64
	beforeCreatePVZCounter uint64
	CreatePVZMock          mPVZServiceMockCreatePVZ

	funcCreateReception          func(ctx context.Context, pvzId uuid.UUID) (rp1 *model.Reception, err error)
	funcCreateReceptionOrigin    string
	inspectFuncCreateReception   func(ctx context.Context, pvzId uuid.UUID)
	afterCreateReceptionCounter  uint64
	beforeCreateReceptionCounter uint64
	CreateReceptionMock          mPVZServiceMockCreateReception

	funcDeleteLastProductInReception          func(ctx context.Context, pvzId uuid.UUID) (err error)
	funcDeleteLastProductInReceptionOrigin    string
	inspectFuncDeleteLastProductInReception   func(ctx context.Context, pvzId uuid.UUID)
	afterDeleteLastProductInReceptionCounter  uint64
	beforeDeleteLastProductInReceptionCounter uint64
	DeleteLastProductInReceptionMock          mPVZServiceMockDeleteLastProductInReception

	funcGetListPVZs          func(ctx context.Context, pagination *model.Filter) (ppa1 []*model.PVZWithReceptions, err error)
	funcGetListPVZsOrigin    string
	inspectFuncGetListPVZs   func(ctx context.Context, pagination *model.Filter)
	afterGetListPVZsCounter  uint64
	beforeGetListPVZsCounter uint64
	GetListPVZsMock          mPVZServiceMockGetListPVZs
}

// NewPVZServiceMock returns a mock for mm_service.PVZService
func NewPVZServiceMock(t minimock.Tester) *PVZServiceMock {
	m := &PVZServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddProductToReceptionMock = mPVZServiceMockAddProductToReception{mock: m}
	m.AddProductToReceptionMock.callArgs = []*PVZServiceMockAddProductToReceptionParams{}

	m.CloseReceptionMock = mPVZServiceMockCloseReception{mock: m}
	m.CloseReceptionMock.callArgs = []*PVZServiceMockCloseReceptionParams{}

	m.CreatePVZMock = mPVZServiceMockCreatePVZ{mock: m}
	m.CreatePVZMock.callArgs = []*PVZServiceMockCreatePVZParams{}

	m.CreateReceptionMock = mPVZServiceMockCreateReception{mock: m}
	m.CreateReceptionMock.callArgs = []*PVZServiceMockCreateReceptionParams{}

	m.DeleteLastProductInReceptionMock = mPVZServiceMockDeleteLastProductInReception{mock: m}
	m.DeleteLastProductInReceptionMock.callArgs = []*PVZServiceMockDeleteLastProductInReceptionParams{}

	m.GetListPVZsMock = mPVZServiceMockGetListPVZs{mock: m}
	m.GetListPVZsMock.callArgs = []*PVZServiceMockGetListPVZsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPVZServiceMockAddProductToReception struct {
	optional           bool
	mock               *PVZServiceMock
	defaultExpectation *PVZServiceMockAddProductToReceptionExpectation
	expectations       []*PVZServiceMockAddProductToReceptionExpectation

	callArgs []*PVZServiceMockAddProductToReceptionParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZServiceMockAddProductToReceptionExpectation specifies expectation struct of the PVZService.AddProductToReception
type PVZServiceMockAddProductToReceptionExpectation struct {
	mock               *PVZServiceMock
	params             *PVZServiceMockAddProductToReceptionParams
	paramPtrs          *PVZServiceMockAddProductToReceptionParamPtrs
	expectationOrigins PVZServiceMockAddProductToReceptionExpectationOrigins
	results            *PVZServiceMockAddProductToReceptionResults
	returnOrigin       string
	Counter            uint64
}

// PVZServiceMockAddProductToReceptionParams contains parameters of the PVZService.AddProductToReception
type PVZServiceMockAddProductToReceptionParams struct {
	ctx        context.Context
	productPVZ *model.ProductPVZ
}

// PVZServiceMockAddProductToReceptionParamPtrs contains pointers to parameters of the PVZService.AddProductToReception
type PVZServiceMockAddProductToReceptionParamPtrs struct {
	ctx        *context.Context
	productPVZ **model.ProductPVZ
}

// PVZServiceMockAddProductToReceptionResults contains results of the PVZService.AddProductToReception
type PVZServiceMockAddProductToReceptionResults struct {
	pp1 *model.Product
	err error
}

// PVZServiceMockAddProductToReceptionOrigins contains origins of expectations of the PVZService.AddProductToReception
type PVZServiceMockAddProductToReceptionExpectationOrigins struct {
	origin           string
	originCtx        string
	originProductPVZ string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddProductToReception *mPVZServiceMockAddProductToReception) Optional() *mPVZServiceMockAddProductToReception {
	mmAddProductToReception.optional = true
	return mmAddProductToReception
}

// Expect sets up expected params for PVZService.AddProductToReception
func (mmAddProductToReception *mPVZServiceMockAddProductToReception) Expect(ctx context.Context, productPVZ *model.ProductPVZ) *mPVZServiceMockAddProductToReception {
	if mmAddProductToReception.mock.funcAddProductToReception != nil {
		mmAddProductToReception.mock.t.Fatalf("PVZServiceMock.AddProductToReception mock is already set by Set")
	}

	if mmAddProductToReception.defaultExpectation == nil {
		mmAddProductToReception.defaultExpectation = &PVZServiceMockAddProductToReceptionExpectation{}
	}

	if mmAddProductToReception.defaultExpectation.paramPtrs != nil {
		mmAddProductToReception.mock.t.Fatalf("PVZServiceMock.AddProductToReception mock is already set by ExpectParams functions")
	}

	mmAddProductToReception.defaultExpectation.params = &PVZServiceMockAddProductToReceptionParams{ctx, productPVZ}
	mmAddProductToReception.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddProductToReception.expectations {
		if minimock.Equal(e.params, mmAddProductToReception.defaultExpectation.params) {
			mmAddProductToReception.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddProductToReception.defaultExpectation.params)
		}
	}

	return mmAddProductToReception
}

// ExpectCtxParam1 sets up expected param ctx for PVZService.AddProductToReception
func (mmAddProductToReception *mPVZServiceMockAddProductToReception) ExpectCtxParam1(ctx context.Context) *mPVZServiceMockAddProductToReception {
	if mmAddProductToReception.mock.funcAddProductToReception != nil {
		mmAddProductToReception.mock.t.Fatalf("PVZServiceMock.AddProductToReception mock is already set by Set")
	}

	if mmAddProductToReception.defaultExpectation == nil {
		mmAddProductToReception.defaultExpectation = &PVZServiceMockAddProductToReceptionExpectation{}
	}

	if mmAddProductToReception.defaultExpectation.params != nil {
		mmAddProductToReception.mock.t.Fatalf("PVZServiceMock.AddProductToReception mock is already set by Expect")
	}

	if mmAddProductToReception.defaultExpectation.paramPtrs == nil {
		mmAddProductToReception.defaultExpectation.paramPtrs = &PVZServiceMockAddProductToReceptionParamPtrs{}
	}
	mmAddProductToReception.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddProductToReception.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddProductToReception
}

// ExpectProductPVZParam2 sets up expected param productPVZ for PVZService.AddProductToReception
func (mmAddProductToReception *mPVZServiceMockAddProductToReception) ExpectProductPVZParam2(productPVZ *model.ProductPVZ) *mPVZServiceMockAddProductToReception {
	if mmAddProductToReception.mock.funcAddProductToReception != nil {
		mmAddProductToReception.mock.t.Fatalf("PVZServiceMock.AddProductToReception mock is already set by Set")
	}

	if mmAddProductToReception.defaultExpectation == nil {
		mmAddProductToReception.defaultExpectation = &PVZServiceMockAddProductToReceptionExpectation{}
	}

	if mmAddProductToReception.defaultExpectation.params != nil {
		mmAddProductToReception.mock.t.Fatalf("PVZServiceMock.AddProductToReception mock is already set by Expect")
	}

	if mmAddProductToReception.defaultExpectation.paramPtrs == nil {
		mmAddProductToReception.defaultExpectation.paramPtrs = &PVZServiceMockAddProductToReceptionParamPtrs{}
	}
	mmAddProductToReception.defaultExpectation.paramPtrs.productPVZ = &productPVZ
	mmAddProductToReception.defaultExpectation.expectationOrigins.originProductPVZ = minimock.CallerInfo(1)

	return mmAddProductToReception
}

// Inspect accepts an inspector function that has same arguments as the PVZService.AddProductToReception
func (mmAddProductToReception *mPVZServiceMockAddProductToReception) Inspect(f func(ctx context.Context, productPVZ *model.ProductPVZ)) *mPVZServiceMockAddProductToReception {
	if mmAddProductToReception.mock.inspectFuncAddProductToReception != nil {
		mmAddProductToReception.mock.t.Fatalf("Inspect function is already set for PVZServiceMock.AddProductToReception")
	}

	mmAddProductToReception.mock.inspectFuncAddProductToReception = f

	return mmAddProductToReception
}

// Return sets up results that will be returned by PVZService.AddProductToReception
func (mmAddProductToReception *mPVZServiceMockAddProductToReception) Return(pp1 *model.Product, err error) *PVZServiceMock {
	if mmAddProductToReception.mock.funcAddProductToReception != nil {
		mmAddProductToReception.mock.t.Fatalf("PVZServiceMock.AddProductToReception mock is already set by Set")
	}

	if mmAddProductToReception.defaultExpectation == nil {
		mmAddProductToReception.defaultExpectation = &PVZServiceMockAddProductToReceptionExpectation{mock: mmAddProductToReception.mock}
	}
	mmAddProductToReception.defaultExpectation.results = &PVZServiceMockAddProductToReceptionResults{pp1, err}
	mmAddProductToReception.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddProductToReception.mock
}

// Set uses given function f to mock the PVZService.AddProductToReception method
func (mmAddProductToReception *mPVZServiceMockAddProductToReception) Set(f func(ctx context.Context, productPVZ *model.ProductPVZ) (pp1 *model.Product, err error)) *PVZServiceMock {
	if mmAddProductToReception.defaultExpectation != nil {
		mmAddProductToReception.mock.t.Fatalf("Default expectation is already set for the PVZService.AddProductToReception method")
	}

	if len(mmAddProductToReception.expectations) > 0 {
		mmAddProductToReception.mock.t.Fatalf("Some expectations are already set for the PVZService.AddProductToReception method")
	}

	mmAddProductToReception.mock.funcAddProductToReception = f
	mmAddProductToReception.mock.funcAddProductToReceptionOrigin = minimock.CallerInfo(1)
	return mmAddProductToReception.mock
}

// When sets expectation for the PVZService.AddProductToReception which will trigger the result defined by the following
// Then helper
func (mmAddProductToReception *mPVZServiceMockAddProductToReception) When(ctx context.Context, productPVZ *model.ProductPVZ) *PVZServiceMockAddProductToReceptionExpectation {
	if mmAddProductToReception.mock.funcAddProductToReception != nil {
		mmAddProductToReception.mock.t.Fatalf("PVZServiceMock.AddProductToReception mock is already set by Set")
	}

	expectation := &PVZServiceMockAddProductToReceptionExpectation{
		mock:               mmAddProductToReception.mock,
		params:             &PVZServiceMockAddProductToReceptionParams{ctx, productPVZ},
		expectationOrigins: PVZServiceMockAddProductToReceptionExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddProductToReception.expectations = append(mmAddProductToReception.expectations, expectation)
	return expectation
}

// Then sets up PVZService.AddProductToReception return parameters for the expectation previously defined by the When method
func (e *PVZServiceMockAddProductToReceptionExpectation) Then(pp1 *model.Product, err error) *PVZServiceMock {
	e.results = &PVZServiceMockAddProductToReceptionResults{pp1, err}
	return e.mock
}

// Times sets number of times PVZService.AddProductToReception should be invoked
func (mmAddProductToReception *mPVZServiceMockAddProductToReception) Times(n uint64) *mPVZServiceMockAddProductToReception {
	if n == 0 {
		mmAddProductToReception.mock.t.Fatalf("Times of PVZServiceMock.AddProductToReception mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddProductToReception.expectedInvocations, n)
	mmAddProductToReception.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddProductToReception
}

func (mmAddProductToReception *mPVZServiceMockAddProductToReception) invocationsDone() bool {
	if len(mmAddProductToReception.expectations) == 0 && mmAddProductToReception.defaultExpectation == nil && mmAddProductToReception.mock.funcAddProductToReception == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddProductToReception.mock.afterAddProductToReceptionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddProductToReception.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddProductToReception implements mm_service.PVZService
func (mmAddProductToReception *PVZServiceMock) AddProductToReception(ctx context.Context, productPVZ *model.ProductPVZ) (pp1 *model.Product, err error) {
	mm_atomic.AddUint64(&mmAddProductToReception.beforeAddProductToReceptionCounter, 1)
	defer mm_atomic.AddUint64(&mmAddProductToReception.afterAddProductToReceptionCounter, 1)

	mmAddProductToReception.t.Helper()

	if mmAddProductToReception.inspectFuncAddProductToReception != nil {
		mmAddProductToReception.inspectFuncAddProductToReception(ctx, productPVZ)
	}

	mm_params := PVZServiceMockAddProductToReceptionParams{ctx, productPVZ}

	// Record call args
	mmAddProductToReception.AddProductToReceptionMock.mutex.Lock()
	mmAddProductToReception.AddProductToReceptionMock.callArgs = append(mmAddProductToReception.AddProductToReceptionMock.callArgs, &mm_params)
	mmAddProductToReception.AddProductToReceptionMock.mutex.Unlock()

	for _, e := range mmAddProductToReception.AddProductToReceptionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmAddProductToReception.AddProductToReceptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddProductToReception.AddProductToReceptionMock.defaultExpectation.Counter, 1)
		mm_want := mmAddProductToReception.AddProductToReceptionMock.defaultExpectation.params
		mm_want_ptrs := mmAddProductToReception.AddProductToReceptionMock.defaultExpectation.paramPtrs

		mm_got := PVZServiceMockAddProductToReceptionParams{ctx, productPVZ}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddProductToReception.t.Errorf("PVZServiceMock.AddProductToReception got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddProductToReception.AddProductToReceptionMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.productPVZ != nil && !minimock.Equal(*mm_want_ptrs.productPVZ, mm_got.productPVZ) {
				mmAddProductToReception.t.Errorf("PVZServiceMock.AddProductToReception got unexpected parameter productPVZ, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddProductToReception.AddProductToReceptionMock.defaultExpectation.expectationOrigins.originProductPVZ, *mm_want_ptrs.productPVZ, mm_got.productPVZ, minimock.Diff(*mm_want_ptrs.productPVZ, mm_got.productPVZ))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddProductToReception.t.Errorf("PVZServiceMock.AddProductToReception got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddProductToReception.AddProductToReceptionMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddProductToReception.AddProductToReceptionMock.defaultExpectation.results
		if mm_results == nil {
			mmAddProductToReception.t.Fatal("No results are set for the PVZServiceMock.AddProductToReception")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmAddProductToReception.funcAddProductToReception != nil {
		return mmAddProductToReception.funcAddProductToReception(ctx, productPVZ)
	}
	mmAddProductToReception.t.Fatalf("Unexpected call to PVZServiceMock.AddProductToReception. %v %v", ctx, productPVZ)
	return
}

// AddProductToReceptionAfterCounter returns a count of finished PVZServiceMock.AddProductToReception invocations
func (mmAddProductToReception *PVZServiceMock) AddProductToReceptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddProductToReception.afterAddProductToReceptionCounter)
}

// AddProductToReceptionBeforeCounter returns a count of PVZServiceMock.AddProductToReception invocations
func (mmAddProductToReception *PVZServiceMock) AddProductToReceptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddProductToReception.beforeAddProductToReceptionCounter)
}

// Calls returns a list of arguments used in each call to PVZServiceMock.AddProductToReception.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddProductToReception *mPVZServiceMockAddProductToReception) Calls() []*PVZServiceMockAddProductToReceptionParams {
	mmAddProductToReception.mutex.RLock()

	argCopy := make([]*PVZServiceMockAddProductToReceptionParams, len(mmAddProductToReception.callArgs))
	copy(argCopy, mmAddProductToReception.callArgs)

	mmAddProductToReception.mutex.RUnlock()

	return argCopy
}

// MinimockAddProductToReceptionDone returns true if the count of the AddProductToReception invocations corresponds
// the number of defined expectations
func (m *PVZServiceMock) MinimockAddProductToReceptionDone() bool {
	if m.AddProductToReceptionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddProductToReceptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddProductToReceptionMock.invocationsDone()
}

// MinimockAddProductToReceptionInspect logs each unmet expectation
func (m *PVZServiceMock) MinimockAddProductToReceptionInspect() {
	for _, e := range m.AddProductToReceptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZServiceMock.AddProductToReception at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddProductToReceptionCounter := mm_atomic.LoadUint64(&m.afterAddProductToReceptionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddProductToReceptionMock.defaultExpectation != nil && afterAddProductToReceptionCounter < 1 {
		if m.AddProductToReceptionMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZServiceMock.AddProductToReception at\n%s", m.AddProductToReceptionMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZServiceMock.AddProductToReception at\n%s with params: %#v", m.AddProductToReceptionMock.defaultExpectation.expectationOrigins.origin, *m.AddProductToReceptionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddProductToReception != nil && afterAddProductToReceptionCounter < 1 {
		m.t.Errorf("Expected call to PVZServiceMock.AddProductToReception at\n%s", m.funcAddProductToReceptionOrigin)
	}

	if !m.AddProductToReceptionMock.invocationsDone() && afterAddProductToReceptionCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZServiceMock.AddProductToReception at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddProductToReceptionMock.expectedInvocations), m.AddProductToReceptionMock.expectedInvocationsOrigin, afterAddProductToReceptionCounter)
	}
}

type mPVZServiceMockCloseReception struct {
	optional           bool
	mock               *PVZServiceMock
	defaultExpectation *PVZServiceMockCloseReceptionExpectation
	expectations       []*PVZServiceMockCloseReceptionExpectation

	callArgs []*PVZServiceMockCloseReceptionParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZServiceMockCloseReceptionExpectation specifies expectation struct of the PVZService.CloseReception
type PVZServiceMockCloseReceptionExpectation struct {
	mock               *PVZServiceMock
	params             *PVZServiceMockCloseReceptionParams
	paramPtrs          *PVZServiceMockCloseReceptionParamPtrs
	expectationOrigins PVZServiceMockCloseReceptionExpectationOrigins
	results            *PVZServiceMockCloseReceptionResults
	returnOrigin       string
	Counter            uint64
}

// PVZServiceMockCloseReceptionParams contains parameters of the PVZService.CloseReception
type PVZServiceMockCloseReceptionParams struct {
	ctx   context.Context
	pvzId uuid.UUID
}

// PVZServiceMockCloseReceptionParamPtrs contains pointers to parameters of the PVZService.CloseReception
type PVZServiceMockCloseReceptionParamPtrs struct {
	ctx   *context.Context
	pvzId *uuid.UUID
}

// PVZServiceMockCloseReceptionResults contains results of the PVZService.CloseReception
type PVZServiceMockCloseReceptionResults struct {
	rp1 *model.Reception
	err error
}

// PVZServiceMockCloseReceptionOrigins contains origins of expectations of the PVZService.CloseReception
type PVZServiceMockCloseReceptionExpectationOrigins struct {
	origin      string
	originCtx   string
	originPvzId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCloseReception *mPVZServiceMockCloseReception) Optional() *mPVZServiceMockCloseReception {
	mmCloseReception.optional = true
	return mmCloseReception
}

// Expect sets up expected params for PVZService.CloseReception
func (mmCloseReception *mPVZServiceMockCloseReception) Expect(ctx context.Context, pvzId uuid.UUID) *mPVZServiceMockCloseReception {
	if mmCloseReception.mock.funcCloseReception != nil {
		mmCloseReception.mock.t.Fatalf("PVZServiceMock.CloseReception mock is already set by Set")
	}

	if mmCloseReception.defaultExpectation == nil {
		mmCloseReception.defaultExpectation = &PVZServiceMockCloseReceptionExpectation{}
	}

	if mmCloseReception.defaultExpectation.paramPtrs != nil {
		mmCloseReception.mock.t.Fatalf("PVZServiceMock.CloseReception mock is already set by ExpectParams functions")
	}

	mmCloseReception.defaultExpectation.params = &PVZServiceMockCloseReceptionParams{ctx, pvzId}
	mmCloseReception.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCloseReception.expectations {
		if minimock.Equal(e.params, mmCloseReception.defaultExpectation.params) {
			mmCloseReception.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCloseReception.defaultExpectation.params)
		}
	}

	return mmCloseReception
}

// ExpectCtxParam1 sets up expected param ctx for PVZService.CloseReception
func (mmCloseReception *mPVZServiceMockCloseReception) ExpectCtxParam1(ctx context.Context) *mPVZServiceMockCloseReception {
	if mmCloseReception.mock.funcCloseReception != nil {
		mmCloseReception.mock.t.Fatalf("PVZServiceMock.CloseReception mock is already set by Set")
	}

	if mmCloseReception.defaultExpectation == nil {
		mmCloseReception.defaultExpectation = &PVZServiceMockCloseReceptionExpectation{}
	}

	if mmCloseReception.defaultExpectation.params != nil {
		mmCloseReception.mock.t.Fatalf("PVZServiceMock.CloseReception mock is already set by Expect")
	}

	if mmCloseReception.defaultExpectation.paramPtrs == nil {
		mmCloseReception.defaultExpectation.paramPtrs = &PVZServiceMockCloseReceptionParamPtrs{}
	}
	mmCloseReception.defaultExpectation.paramPtrs.ctx = &ctx
	mmCloseReception.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCloseReception
}

// ExpectPvzIdParam2 sets up expected param pvzId for PVZService.CloseReception
func (mmCloseReception *mPVZServiceMockCloseReception) ExpectPvzIdParam2(pvzId uuid.UUID) *mPVZServiceMockCloseReception {
	if mmCloseReception.mock.funcCloseReception != nil {
		mmCloseReception.mock.t.Fatalf("PVZServiceMock.CloseReception mock is already set by Set")
	}

	if mmCloseReception.defaultExpectation == nil {
		mmCloseReception.defaultExpectation = &PVZServiceMockCloseReceptionExpectation{}
	}

	if mmCloseReception.defaultExpectation.params != nil {
		mmCloseReception.mock.t.Fatalf("PVZServiceMock.CloseReception mock is already set by Expect")
	}

	if mmCloseReception.defaultExpectation.paramPtrs == nil {
		mmCloseReception.defaultExpectation.paramPtrs = &PVZServiceMockCloseReceptionParamPtrs{}
	}
	mmCloseReception.defaultExpectation.paramPtrs.pvzId = &pvzId
	mmCloseReception.defaultExpectation.expectationOrigins.originPvzId = minimock.CallerInfo(1)

	return mmCloseReception
}

// Inspect accepts an inspector function that has same arguments as the PVZService.CloseReception
func (mmCloseReception *mPVZServiceMockCloseReception) Inspect(f func(ctx context.Context, pvzId uuid.UUID)) *mPVZServiceMockCloseReception {
	if mmCloseReception.mock.inspectFuncCloseReception != nil {
		mmCloseReception.mock.t.Fatalf("Inspect function is already set for PVZServiceMock.CloseReception")
	}

	mmCloseReception.mock.inspectFuncCloseReception = f

	return mmCloseReception
}

// Return sets up results that will be returned by PVZService.CloseReception
func (mmCloseReception *mPVZServiceMockCloseReception) Return(rp1 *model.Reception, err error) *PVZServiceMock {
	if mmCloseReception.mock.funcCloseReception != nil {
		mmCloseReception.mock.t.Fatalf("PVZServiceMock.CloseReception mock is already set by Set")
	}

	if mmCloseReception.defaultExpectation == nil {
		mmCloseReception.defaultExpectation = &PVZServiceMockCloseReceptionExpectation{mock: mmCloseReception.mock}
	}
	mmCloseReception.defaultExpectation.results = &PVZServiceMockCloseReceptionResults{rp1, err}
	mmCloseReception.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCloseReception.mock
}

// Set uses given function f to mock the PVZService.CloseReception method
func (mmCloseReception *mPVZServiceMockCloseReception) Set(f func(ctx context.Context, pvzId uuid.UUID) (rp1 *model.Reception, err error)) *PVZServiceMock {
	if mmCloseReception.defaultExpectation != nil {
		mmCloseReception.mock.t.Fatalf("Default expectation is already set for the PVZService.CloseReception method")
	}

	if len(mmCloseReception.expectations) > 0 {
		mmCloseReception.mock.t.Fatalf("Some expectations are already set for the PVZService.CloseReception method")
	}

	mmCloseReception.mock.funcCloseReception = f
	mmCloseReception.mock.funcCloseReceptionOrigin = minimock.CallerInfo(1)
	return mmCloseReception.mock
}

// When sets expectation for the PVZService.CloseReception which will trigger the result defined by the following
// Then helper
func (mmCloseReception *mPVZServiceMockCloseReception) When(ctx context.Context, pvzId uuid.UUID) *PVZServiceMockCloseReceptionExpectation {
	if mmCloseReception.mock.funcCloseReception != nil {
		mmCloseReception.mock.t.Fatalf("PVZServiceMock.CloseReception mock is already set by Set")
	}

	expectation := &PVZServiceMockCloseReceptionExpectation{
		mock:               mmCloseReception.mock,
		params:             &PVZServiceMockCloseReceptionParams{ctx, pvzId},
		expectationOrigins: PVZServiceMockCloseReceptionExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCloseReception.expectations = append(mmCloseReception.expectations, expectation)
	return expectation
}

// Then sets up PVZService.CloseReception return parameters for the expectation previously defined by the When method
func (e *PVZServiceMockCloseReceptionExpectation) Then(rp1 *model.Reception, err error) *PVZServiceMock {
	e.results = &PVZServiceMockCloseReceptionResults{rp1, err}
	return e.mock
}

// Times sets number of times PVZService.CloseReception should be invoked
func (mmCloseReception *mPVZServiceMockCloseReception) Times(n uint64) *mPVZServiceMockCloseReception {
	if n == 0 {
		mmCloseReception.mock.t.Fatalf("Times of PVZServiceMock.CloseReception mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCloseReception.expectedInvocations, n)
	mmCloseReception.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCloseReception
}

func (mmCloseReception *mPVZServiceMockCloseReception) invocationsDone() bool {
	if len(mmCloseReception.expectations) == 0 && mmCloseReception.defaultExpectation == nil && mmCloseReception.mock.funcCloseReception == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCloseReception.mock.afterCloseReceptionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCloseReception.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CloseReception implements mm_service.PVZService
func (mmCloseReception *PVZServiceMock) CloseReception(ctx context.Context, pvzId uuid.UUID) (rp1 *model.Reception, err error) {
	mm_atomic.AddUint64(&mmCloseReception.beforeCloseReceptionCounter, 1)
	defer mm_atomic.AddUint64(&mmCloseReception.afterCloseReceptionCounter, 1)

	mmCloseReception.t.Helper()

	if mmCloseReception.inspectFuncCloseReception != nil {
		mmCloseReception.inspectFuncCloseReception(ctx, pvzId)
	}

	mm_params := PVZServiceMockCloseReceptionParams{ctx, pvzId}

	// Record call args
	mmCloseReception.CloseReceptionMock.mutex.Lock()
	mmCloseReception.CloseReceptionMock.callArgs = append(mmCloseReception.CloseReceptionMock.callArgs, &mm_params)
	mmCloseReception.CloseReceptionMock.mutex.Unlock()

	for _, e := range mmCloseReception.CloseReceptionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmCloseReception.CloseReceptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCloseReception.CloseReceptionMock.defaultExpectation.Counter, 1)
		mm_want := mmCloseReception.CloseReceptionMock.defaultExpectation.params
		mm_want_ptrs := mmCloseReception.CloseReceptionMock.defaultExpectation.paramPtrs

		mm_got := PVZServiceMockCloseReceptionParams{ctx, pvzId}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCloseReception.t.Errorf("PVZServiceMock.CloseReception got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCloseReception.CloseReceptionMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pvzId != nil && !minimock.Equal(*mm_want_ptrs.pvzId, mm_got.pvzId) {
				mmCloseReception.t.Errorf("PVZServiceMock.CloseReception got unexpected parameter pvzId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCloseReception.CloseReceptionMock.defaultExpectation.expectationOrigins.originPvzId, *mm_want_ptrs.pvzId, mm_got.pvzId, minimock.Diff(*mm_want_ptrs.pvzId, mm_got.pvzId))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCloseReception.t.Errorf("PVZServiceMock.CloseReception got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCloseReception.CloseReceptionMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCloseReception.CloseReceptionMock.defaultExpectation.results
		if mm_results == nil {
			mmCloseReception.t.Fatal("No results are set for the PVZServiceMock.CloseReception")
		}
		return (*mm_results).rp1, (*mm_results).err
	}
	if mmCloseReception.funcCloseReception != nil {
		return mmCloseReception.funcCloseReception(ctx, pvzId)
	}
	mmCloseReception.t.Fatalf("Unexpected call to PVZServiceMock.CloseReception. %v %v", ctx, pvzId)
	return
}

// CloseReceptionAfterCounter returns a count of finished PVZServiceMock.CloseReception invocations
func (mmCloseReception *PVZServiceMock) CloseReceptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCloseReception.afterCloseReceptionCounter)
}

// CloseReceptionBeforeCounter returns a count of PVZServiceMock.CloseReception invocations
func (mmCloseReception *PVZServiceMock) CloseReceptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCloseReception.beforeCloseReceptionCounter)
}

// Calls returns a list of arguments used in each call to PVZServiceMock.CloseReception.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCloseReception *mPVZServiceMockCloseReception) Calls() []*PVZServiceMockCloseReceptionParams {
	mmCloseReception.mutex.RLock()

	argCopy := make([]*PVZServiceMockCloseReceptionParams, len(mmCloseReception.callArgs))
	copy(argCopy, mmCloseReception.callArgs)

	mmCloseReception.mutex.RUnlock()

	return argCopy
}

// MinimockCloseReceptionDone returns true if the count of the CloseReception invocations corresponds
// the number of defined expectations
func (m *PVZServiceMock) MinimockCloseReceptionDone() bool {
	if m.CloseReceptionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CloseReceptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CloseReceptionMock.invocationsDone()
}

// MinimockCloseReceptionInspect logs each unmet expectation
func (m *PVZServiceMock) MinimockCloseReceptionInspect() {
	for _, e := range m.CloseReceptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZServiceMock.CloseReception at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCloseReceptionCounter := mm_atomic.LoadUint64(&m.afterCloseReceptionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CloseReceptionMock.defaultExpectation != nil && afterCloseReceptionCounter < 1 {
		if m.CloseReceptionMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZServiceMock.CloseReception at\n%s", m.CloseReceptionMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZServiceMock.CloseReception at\n%s with params: %#v", m.CloseReceptionMock.defaultExpectation.expectationOrigins.origin, *m.CloseReceptionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCloseReception != nil && afterCloseReceptionCounter < 1 {
		m.t.Errorf("Expected call to PVZServiceMock.CloseReception at\n%s", m.funcCloseReceptionOrigin)
	}

	if !m.CloseReceptionMock.invocationsDone() && afterCloseReceptionCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZServiceMock.CloseReception at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CloseReceptionMock.expectedInvocations), m.CloseReceptionMock.expectedInvocationsOrigin, afterCloseReceptionCounter)
	}
}

type mPVZServiceMockCreatePVZ struct {
	optional           bool
	mock               *PVZServiceMock
	defaultExpectation *PVZServiceMockCreatePVZExpectation
	expectations       []*PVZServiceMockCreatePVZExpectation

	callArgs []*PVZServiceMockCreatePVZParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZServiceMockCreatePVZExpectation specifies expectation struct of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZExpectation struct {
	mock               *PVZServiceMock
	params             *PVZServiceMockCreatePVZParams
	paramPtrs          *PVZServiceMockCreatePVZParamPtrs
	expectationOrigins PVZServiceMockCreatePVZExpectationOrigins
	results            *PVZServiceMockCreatePVZResults
	returnOrigin       string
	Counter            uint64
}

// PVZServiceMockCreatePVZParams contains parameters of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZParams struct {
	ctx context.Context
	pvz *model.PVZInfo
}

// PVZServiceMockCreatePVZParamPtrs contains pointers to parameters of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZParamPtrs struct {
	ctx *context.Context
	pvz **model.PVZInfo
}

// PVZServiceMockCreatePVZResults contains results of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZResults struct {
	pp1 *model.PVZ
	err error
}

// PVZServiceMockCreatePVZOrigins contains origins of expectations of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZExpectationOrigins struct {
	origin    string
	originCtx string
	originPvz string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Optional() *mPVZServiceMockCreatePVZ {
	mmCreatePVZ.optional = true
	return mmCreatePVZ
}

// Expect sets up expected params for PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Expect(ctx context.Context, pvz *model.PVZInfo) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{}
	}

	if mmCreatePVZ.defaultExpectation.paramPtrs != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by ExpectParams functions")
	}

	mmCreatePVZ.defaultExpectation.params = &PVZServiceMockCreatePVZParams{ctx, pvz}
	mmCreatePVZ.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreatePVZ.expectations {
		if minimock.Equal(e.params, mmCreatePVZ.defaultExpectation.params) {
			mmCreatePVZ.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreatePVZ.defaultExpectation.params)
		}
	}

	return mmCreatePVZ
}

// ExpectCtxParam1 sets up expected param ctx for PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) ExpectCtxParam1(ctx context.Context) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{}
	}

	if mmCreatePVZ.defaultExpectation.params != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Expect")
	}

	if mmCreatePVZ.defaultExpectation.paramPtrs == nil {
		mmCreatePVZ.defaultExpectation.paramPtrs = &PVZServiceMockCreatePVZParamPtrs{}
	}
	mmCreatePVZ.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreatePVZ.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreatePVZ
}

// ExpectPvzParam2 sets up expected param pvz for PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) ExpectPvzParam2(pvz *model.PVZInfo) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{}
	}

	if mmCreatePVZ.defaultExpectation.params != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Expect")
	}

	if mmCreatePVZ.defaultExpectation.paramPtrs == nil {
		mmCreatePVZ.defaultExpectation.paramPtrs = &PVZServiceMockCreatePVZParamPtrs{}
	}
	mmCreatePVZ.defaultExpectation.paramPtrs.pvz = &pvz
	mmCreatePVZ.defaultExpectation.expectationOrigins.originPvz = minimock.CallerInfo(1)

	return mmCreatePVZ
}

// Inspect accepts an inspector function that has same arguments as the PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Inspect(f func(ctx context.Context, pvz *model.PVZInfo)) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.inspectFuncCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("Inspect function is already set for PVZServiceMock.CreatePVZ")
	}

	mmCreatePVZ.mock.inspectFuncCreatePVZ = f

	return mmCreatePVZ
}

// Return sets up results that will be returned by PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Return(pp1 *model.PVZ, err error) *PVZServiceMock {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{mock: mmCreatePVZ.mock}
	}
	mmCreatePVZ.defaultExpectation.results = &PVZServiceMockCreatePVZResults{pp1, err}
	mmCreatePVZ.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreatePVZ.mock
}

// Set uses given function f to mock the PVZService.CreatePVZ method
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Set(f func(ctx context.Context, pvz *model.PVZInfo) (pp1 *model.PVZ, err error)) *PVZServiceMock {
	if mmCreatePVZ.defaultExpectation != nil {
		mmCreatePVZ.mock.t.Fatalf("Default expectation is already set for the PVZService.CreatePVZ method")
	}

	if len(mmCreatePVZ.expectations) > 0 {
		mmCreatePVZ.mock.t.Fatalf("Some expectations are already set for the PVZService.CreatePVZ method")
	}

	mmCreatePVZ.mock.funcCreatePVZ = f
	mmCreatePVZ.mock.funcCreatePVZOrigin = minimock.CallerInfo(1)
	return mmCreatePVZ.mock
}

// When sets expectation for the PVZService.CreatePVZ which will trigger the result defined by the following
// Then helper
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) When(ctx context.Context, pvz *model.PVZInfo) *PVZServiceMockCreatePVZExpectation {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	expectation := &PVZServiceMockCreatePVZExpectation{
		mock:               mmCreatePVZ.mock,
		params:             &PVZServiceMockCreatePVZParams{ctx, pvz},
		expectationOrigins: PVZServiceMockCreatePVZExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreatePVZ.expectations = append(mmCreatePVZ.expectations, expectation)
	return expectation
}

// Then sets up PVZService.CreatePVZ return parameters for the expectation previously defined by the When method
func (e *PVZServiceMockCreatePVZExpectation) Then(pp1 *model.PVZ, err error) *PVZServiceMock {
	e.results = &PVZServiceMockCreatePVZResults{pp1, err}
	return e.mock
}

// Times sets number of times PVZService.CreatePVZ should be invoked
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Times(n uint64) *mPVZServiceMockCreatePVZ {
	if n == 0 {
		mmCreatePVZ.mock.t.Fatalf("Times of PVZServiceMock.CreatePVZ mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreatePVZ.expectedInvocations, n)
	mmCreatePVZ.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreatePVZ
}

func (mmCreatePVZ *mPVZServiceMockCreatePVZ) invocationsDone() bool {
	if len(mmCreatePVZ.expectations) == 0 && mmCreatePVZ.defaultExpectation == nil && mmCreatePVZ.mock.funcCreatePVZ == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreatePVZ.mock.afterCreatePVZCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreatePVZ.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreatePVZ implements mm_service.PVZService
func (mmCreatePVZ *PVZServiceMock) CreatePVZ(ctx context.Context, pvz *model.PVZInfo) (pp1 *model.PVZ, err error) {
	mm_atomic.AddUint64(&mmCreatePVZ.beforeCreatePVZCounter, 1)
	defer mm_atomic.AddUint64(&mmCreatePVZ.afterCreatePVZCounter, 1)

	mmCreatePVZ.t.Helper()

	if mmCreatePVZ.inspectFuncCreatePVZ != nil {
		mmCreatePVZ.inspectFuncCreatePVZ(ctx, pvz)
	}

	mm_params := PVZServiceMockCreatePVZParams{ctx, pvz}

	// Record call args
	mmCreatePVZ.CreatePVZMock.mutex.Lock()
	mmCreatePVZ.CreatePVZMock.callArgs = append(mmCreatePVZ.CreatePVZMock.callArgs, &mm_params)
	mmCreatePVZ.CreatePVZMock.mutex.Unlock()

	for _, e := range mmCreatePVZ.CreatePVZMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmCreatePVZ.CreatePVZMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreatePVZ.CreatePVZMock.defaultExpectation.Counter, 1)
		mm_want := mmCreatePVZ.CreatePVZMock.defaultExpectation.params
		mm_want_ptrs := mmCreatePVZ.CreatePVZMock.defaultExpectation.paramPtrs

		mm_got := PVZServiceMockCreatePVZParams{ctx, pvz}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreatePVZ.t.Errorf("PVZServiceMock.CreatePVZ got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreatePVZ.CreatePVZMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pvz != nil && !minimock.Equal(*mm_want_ptrs.pvz, mm_got.pvz) {
				mmCreatePVZ.t.Errorf("PVZServiceMock.CreatePVZ got unexpected parameter pvz, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreatePVZ.CreatePVZMock.defaultExpectation.expectationOrigins.originPvz, *mm_want_ptrs.pvz, mm_got.pvz, minimock.Diff(*mm_want_ptrs.pvz, mm_got.pvz))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreatePVZ.t.Errorf("PVZServiceMock.CreatePVZ got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreatePVZ.CreatePVZMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreatePVZ.CreatePVZMock.defaultExpectation.results
		if mm_results == nil {
			mmCreatePVZ.t.Fatal("No results are set for the PVZServiceMock.CreatePVZ")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmCreatePVZ.funcCreatePVZ != nil {
		return mmCreatePVZ.funcCreatePVZ(ctx, pvz)
	}
	mmCreatePVZ.t.Fatalf("Unexpected call to PVZServiceMock.CreatePVZ. %v %v", ctx, pvz)
	return
}

// CreatePVZAfterCounter returns a count of finished PVZServiceMock.CreatePVZ invocations
func (mmCreatePVZ *PVZServiceMock) CreatePVZAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreatePVZ.afterCreatePVZCounter)
}

// CreatePVZBeforeCounter returns a count of PVZServiceMock.CreatePVZ invocations
func (mmCreatePVZ *PVZServiceMock) CreatePVZBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreatePVZ.beforeCreatePVZCounter)
}

// Calls returns a list of arguments used in each call to PVZServiceMock.CreatePVZ.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Calls() []*PVZServiceMockCreatePVZParams {
	mmCreatePVZ.mutex.RLock()

	argCopy := make([]*PVZServiceMockCreatePVZParams, len(mmCreatePVZ.callArgs))
	copy(argCopy, mmCreatePVZ.callArgs)

	mmCreatePVZ.mutex.RUnlock()

	return argCopy
}

// MinimockCreatePVZDone returns true if the count of the CreatePVZ invocations corresponds
// the number of defined expectations
func (m *PVZServiceMock) MinimockCreatePVZDone() bool {
	if m.CreatePVZMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreatePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreatePVZMock.invocationsDone()
}

// MinimockCreatePVZInspect logs each unmet expectation
func (m *PVZServiceMock) MinimockCreatePVZInspect() {
	for _, e := range m.CreatePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreatePVZCounter := mm_atomic.LoadUint64(&m.afterCreatePVZCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreatePVZMock.defaultExpectation != nil && afterCreatePVZCounter < 1 {
		if m.CreatePVZMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s", m.CreatePVZMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s with params: %#v", m.CreatePVZMock.defaultExpectation.expectationOrigins.origin, *m.CreatePVZMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreatePVZ != nil && afterCreatePVZCounter < 1 {
		m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s", m.funcCreatePVZOrigin)
	}

	if !m.CreatePVZMock.invocationsDone() && afterCreatePVZCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZServiceMock.CreatePVZ at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreatePVZMock.expectedInvocations), m.CreatePVZMock.expectedInvocationsOrigin, afterCreatePVZCounter)
	}
}

type mPVZServiceMockCreateReception struct {
	optional           bool
	mock               *PVZServiceMock
	defaultExpectation *PVZServiceMockCreateReceptionExpectation
	expectations       []*PVZServiceMockCreateReceptionExpectation

	callArgs []*PVZServiceMockCreateReceptionParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZServiceMockCreateReceptionExpectation specifies expectation struct of the PVZService.CreateReception
type PVZServiceMockCreateReceptionExpectation struct {
	mock               *PVZServiceMock
	params             *PVZServiceMockCreateReceptionParams
	paramPtrs          *PVZServiceMockCreateReceptionParamPtrs
	expectationOrigins PVZServiceMockCreateReceptionExpectationOrigins
	results            *PVZServiceMockCreateReceptionResults
	returnOrigin       string
	Counter            uint64
}

// PVZServiceMockCreateReceptionParams contains parameters of the PVZService.CreateReception
type PVZServiceMockCreateReceptionParams struct {
	ctx   context.Context
	pvzId uuid.UUID
}

// PVZServiceMockCreateReceptionParamPtrs contains pointers to parameters of the PVZService.CreateReception
type PVZServiceMockCreateReceptionParamPtrs struct {
	ctx   *context.Context
	pvzId *uuid.UUID
}

// PVZServiceMockCreateReceptionResults contains results of the PVZService.CreateReception
type PVZServiceMockCreateReceptionResults struct {
	rp1 *model.Reception
	err error
}

// PVZServiceMockCreateReceptionOrigins contains origins of expectations of the PVZService.CreateReception
type PVZServiceMockCreateReceptionExpectationOrigins struct {
	origin      string
	originCtx   string
	originPvzId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateReception *mPVZServiceMockCreateReception) Optional() *mPVZServiceMockCreateReception {
	mmCreateReception.optional = true
	return mmCreateReception
}

// Expect sets up expected params for PVZService.CreateReception
func (mmCreateReception *mPVZServiceMockCreateReception) Expect(ctx context.Context, pvzId uuid.UUID) *mPVZServiceMockCreateReception {
	if mmCreateReception.mock.funcCreateReception != nil {
		mmCreateReception.mock.t.Fatalf("PVZServiceMock.CreateReception mock is already set by Set")
	}

	if mmCreateReception.defaultExpectation == nil {
		mmCreateReception.defaultExpectation = &PVZServiceMockCreateReceptionExpectation{}
	}

	if mmCreateReception.defaultExpectation.paramPtrs != nil {
		mmCreateReception.mock.t.Fatalf("PVZServiceMock.CreateReception mock is already set by ExpectParams functions")
	}

	mmCreateReception.defaultExpectation.params = &PVZServiceMockCreateReceptionParams{ctx, pvzId}
	mmCreateReception.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateReception.expectations {
		if minimock.Equal(e.params, mmCreateReception.defaultExpectation.params) {
			mmCreateReception.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateReception.defaultExpectation.params)
		}
	}

	return mmCreateReception
}

// ExpectCtxParam1 sets up expected param ctx for PVZService.CreateReception
func (mmCreateReception *mPVZServiceMockCreateReception) ExpectCtxParam1(ctx context.Context) *mPVZServiceMockCreateReception {
	if mmCreateReception.mock.funcCreateReception != nil {
		mmCreateReception.mock.t.Fatalf("PVZServiceMock.CreateReception mock is already set by Set")
	}

	if mmCreateReception.defaultExpectation == nil {
		mmCreateReception.defaultExpectation = &PVZServiceMockCreateReceptionExpectation{}
	}

	if mmCreateReception.defaultExpectation.params != nil {
		mmCreateReception.mock.t.Fatalf("PVZServiceMock.CreateReception mock is already set by Expect")
	}

	if mmCreateReception.defaultExpectation.paramPtrs == nil {
		mmCreateReception.defaultExpectation.paramPtrs = &PVZServiceMockCreateReceptionParamPtrs{}
	}
	mmCreateReception.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateReception.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateReception
}

// ExpectPvzIdParam2 sets up expected param pvzId for PVZService.CreateReception
func (mmCreateReception *mPVZServiceMockCreateReception) ExpectPvzIdParam2(pvzId uuid.UUID) *mPVZServiceMockCreateReception {
	if mmCreateReception.mock.funcCreateReception != nil {
		mmCreateReception.mock.t.Fatalf("PVZServiceMock.CreateReception mock is already set by Set")
	}

	if mmCreateReception.defaultExpectation == nil {
		mmCreateReception.defaultExpectation = &PVZServiceMockCreateReceptionExpectation{}
	}

	if mmCreateReception.defaultExpectation.params != nil {
		mmCreateReception.mock.t.Fatalf("PVZServiceMock.CreateReception mock is already set by Expect")
	}

	if mmCreateReception.defaultExpectation.paramPtrs == nil {
		mmCreateReception.defaultExpectation.paramPtrs = &PVZServiceMockCreateReceptionParamPtrs{}
	}
	mmCreateReception.defaultExpectation.paramPtrs.pvzId = &pvzId
	mmCreateReception.defaultExpectation.expectationOrigins.originPvzId = minimock.CallerInfo(1)

	return mmCreateReception
}

// Inspect accepts an inspector function that has same arguments as the PVZService.CreateReception
func (mmCreateReception *mPVZServiceMockCreateReception) Inspect(f func(ctx context.Context, pvzId uuid.UUID)) *mPVZServiceMockCreateReception {
	if mmCreateReception.mock.inspectFuncCreateReception != nil {
		mmCreateReception.mock.t.Fatalf("Inspect function is already set for PVZServiceMock.CreateReception")
	}

	mmCreateReception.mock.inspectFuncCreateReception = f

	return mmCreateReception
}

// Return sets up results that will be returned by PVZService.CreateReception
func (mmCreateReception *mPVZServiceMockCreateReception) Return(rp1 *model.Reception, err error) *PVZServiceMock {
	if mmCreateReception.mock.funcCreateReception != nil {
		mmCreateReception.mock.t.Fatalf("PVZServiceMock.CreateReception mock is already set by Set")
	}

	if mmCreateReception.defaultExpectation == nil {
		mmCreateReception.defaultExpectation = &PVZServiceMockCreateReceptionExpectation{mock: mmCreateReception.mock}
	}
	mmCreateReception.defaultExpectation.results = &PVZServiceMockCreateReceptionResults{rp1, err}
	mmCreateReception.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateReception.mock
}

// Set uses given function f to mock the PVZService.CreateReception method
func (mmCreateReception *mPVZServiceMockCreateReception) Set(f func(ctx context.Context, pvzId uuid.UUID) (rp1 *model.Reception, err error)) *PVZServiceMock {
	if mmCreateReception.defaultExpectation != nil {
		mmCreateReception.mock.t.Fatalf("Default expectation is already set for the PVZService.CreateReception method")
	}

	if len(mmCreateReception.expectations) > 0 {
		mmCreateReception.mock.t.Fatalf("Some expectations are already set for the PVZService.CreateReception method")
	}

	mmCreateReception.mock.funcCreateReception = f
	mmCreateReception.mock.funcCreateReceptionOrigin = minimock.CallerInfo(1)
	return mmCreateReception.mock
}

// When sets expectation for the PVZService.CreateReception which will trigger the result defined by the following
// Then helper
func (mmCreateReception *mPVZServiceMockCreateReception) When(ctx context.Context, pvzId uuid.UUID) *PVZServiceMockCreateReceptionExpectation {
	if mmCreateReception.mock.funcCreateReception != nil {
		mmCreateReception.mock.t.Fatalf("PVZServiceMock.CreateReception mock is already set by Set")
	}

	expectation := &PVZServiceMockCreateReceptionExpectation{
		mock:               mmCreateReception.mock,
		params:             &PVZServiceMockCreateReceptionParams{ctx, pvzId},
		expectationOrigins: PVZServiceMockCreateReceptionExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateReception.expectations = append(mmCreateReception.expectations, expectation)
	return expectation
}

// Then sets up PVZService.CreateReception return parameters for the expectation previously defined by the When method
func (e *PVZServiceMockCreateReceptionExpectation) Then(rp1 *model.Reception, err error) *PVZServiceMock {
	e.results = &PVZServiceMockCreateReceptionResults{rp1, err}
	return e.mock
}

// Times sets number of times PVZService.CreateReception should be invoked
func (mmCreateReception *mPVZServiceMockCreateReception) Times(n uint64) *mPVZServiceMockCreateReception {
	if n == 0 {
		mmCreateReception.mock.t.Fatalf("Times of PVZServiceMock.CreateReception mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateReception.expectedInvocations, n)
	mmCreateReception.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateReception
}

func (mmCreateReception *mPVZServiceMockCreateReception) invocationsDone() bool {
	if len(mmCreateReception.expectations) == 0 && mmCreateReception.defaultExpectation == nil && mmCreateReception.mock.funcCreateReception == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateReception.mock.afterCreateReceptionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateReception.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateReception implements mm_service.PVZService
func (mmCreateReception *PVZServiceMock) CreateReception(ctx context.Context, pvzId uuid.UUID) (rp1 *model.Reception, err error) {
	mm_atomic.AddUint64(&mmCreateReception.beforeCreateReceptionCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateReception.afterCreateReceptionCounter, 1)

	mmCreateReception.t.Helper()

	if mmCreateReception.inspectFuncCreateReception != nil {
		mmCreateReception.inspectFuncCreateReception(ctx, pvzId)
	}

	mm_params := PVZServiceMockCreateReceptionParams{ctx, pvzId}

	// Record call args
	mmCreateReception.CreateReceptionMock.mutex.Lock()
	mmCreateReception.CreateReceptionMock.callArgs = append(mmCreateReception.CreateReceptionMock.callArgs, &mm_params)
	mmCreateReception.CreateReceptionMock.mutex.Unlock()

	for _, e := range mmCreateReception.CreateReceptionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmCreateReception.CreateReceptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateReception.CreateReceptionMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateReception.CreateReceptionMock.defaultExpectation.params
		mm_want_ptrs := mmCreateReception.CreateReceptionMock.defaultExpectation.paramPtrs

		mm_got := PVZServiceMockCreateReceptionParams{ctx, pvzId}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateReception.t.Errorf("PVZServiceMock.CreateReception got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateReception.CreateReceptionMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pvzId != nil && !minimock.Equal(*mm_want_ptrs.pvzId, mm_got.pvzId) {
				mmCreateReception.t.Errorf("PVZServiceMock.CreateReception got unexpected parameter pvzId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateReception.CreateReceptionMock.defaultExpectation.expectationOrigins.originPvzId, *mm_want_ptrs.pvzId, mm_got.pvzId, minimock.Diff(*mm_want_ptrs.pvzId, mm_got.pvzId))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateReception.t.Errorf("PVZServiceMock.CreateReception got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateReception.CreateReceptionMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateReception.CreateReceptionMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateReception.t.Fatal("No results are set for the PVZServiceMock.CreateReception")
		}
		return (*mm_results).rp1, (*mm_results).err
	}
	if mmCreateReception.funcCreateReception != nil {
		return mmCreateReception.funcCreateReception(ctx, pvzId)
	}
	mmCreateReception.t.Fatalf("Unexpected call to PVZServiceMock.CreateReception. %v %v", ctx, pvzId)
	return
}

// CreateReceptionAfterCounter returns a count of finished PVZServiceMock.CreateReception invocations
func (mmCreateReception *PVZServiceMock) CreateReceptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateReception.afterCreateReceptionCounter)
}

// CreateReceptionBeforeCounter returns a count of PVZServiceMock.CreateReception invocations
func (mmCreateReception *PVZServiceMock) CreateReceptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateReception.beforeCreateReceptionCounter)
}

// Calls returns a list of arguments used in each call to PVZServiceMock.CreateReception.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateReception *mPVZServiceMockCreateReception) Calls() []*PVZServiceMockCreateReceptionParams {
	mmCreateReception.mutex.RLock()

	argCopy := make([]*PVZServiceMockCreateReceptionParams, len(mmCreateReception.callArgs))
	copy(argCopy, mmCreateReception.callArgs)

	mmCreateReception.mutex.RUnlock()

	return argCopy
}

// MinimockCreateReceptionDone returns true if the count of the CreateReception invocations corresponds
// the number of defined expectations
func (m *PVZServiceMock) MinimockCreateReceptionDone() bool {
	if m.CreateReceptionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateReceptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateReceptionMock.invocationsDone()
}

// MinimockCreateReceptionInspect logs each unmet expectation
func (m *PVZServiceMock) MinimockCreateReceptionInspect() {
	for _, e := range m.CreateReceptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZServiceMock.CreateReception at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateReceptionCounter := mm_atomic.LoadUint64(&m.afterCreateReceptionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateReceptionMock.defaultExpectation != nil && afterCreateReceptionCounter < 1 {
		if m.CreateReceptionMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZServiceMock.CreateReception at\n%s", m.CreateReceptionMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZServiceMock.CreateReception at\n%s with params: %#v", m.CreateReceptionMock.defaultExpectation.expectationOrigins.origin, *m.CreateReceptionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateReception != nil && afterCreateReceptionCounter < 1 {
		m.t.Errorf("Expected call to PVZServiceMock.CreateReception at\n%s", m.funcCreateReceptionOrigin)
	}

	if !m.CreateReceptionMock.invocationsDone() && afterCreateReceptionCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZServiceMock.CreateReception at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateReceptionMock.expectedInvocations), m.CreateReceptionMock.expectedInvocationsOrigin, afterCreateReceptionCounter)
	}
}

type mPVZServiceMockDeleteLastProductInReception struct {
	optional           bool
	mock               *PVZServiceMock
	defaultExpectation *PVZServiceMockDeleteLastProductInReceptionExpectation
	expectations       []*PVZServiceMockDeleteLastProductInReceptionExpectation

	callArgs []*PVZServiceMockDeleteLastProductInReceptionParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZServiceMockDeleteLastProductInReceptionExpectation specifies expectation struct of the PVZService.DeleteLastProductInReception
type PVZServiceMockDeleteLastProductInReceptionExpectation struct {
	mock               *PVZServiceMock
	params             *PVZServiceMockDeleteLastProductInReceptionParams
	paramPtrs          *PVZServiceMockDeleteLastProductInReceptionParamPtrs
	expectationOrigins PVZServiceMockDeleteLastProductInReceptionExpectationOrigins
	results            *PVZServiceMockDeleteLastProductInReceptionResults
	returnOrigin       string
	Counter            uint64
}

// PVZServiceMockDeleteLastProductInReceptionParams contains parameters of the PVZService.DeleteLastProductInReception
type PVZServiceMockDeleteLastProductInReceptionParams struct {
	ctx   context.Context
	pvzId uuid.UUID
}

// PVZServiceMockDeleteLastProductInReceptionParamPtrs contains pointers to parameters of the PVZService.DeleteLastProductInReception
type PVZServiceMockDeleteLastProductInReceptionParamPtrs struct {
	ctx   *context.Context
	pvzId *uuid.UUID
}

// PVZServiceMockDeleteLastProductInReceptionResults contains results of the PVZService.DeleteLastProductInReception
type PVZServiceMockDeleteLastProductInReceptionResults struct {
	err error
}

// PVZServiceMockDeleteLastProductInReceptionOrigins contains origins of expectations of the PVZService.DeleteLastProductInReception
type PVZServiceMockDeleteLastProductInReceptionExpectationOrigins struct {
	origin      string
	originCtx   string
	originPvzId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) Optional() *mPVZServiceMockDeleteLastProductInReception {
	mmDeleteLastProductInReception.optional = true
	return mmDeleteLastProductInReception
}

// Expect sets up expected params for PVZService.DeleteLastProductInReception
func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) Expect(ctx context.Context, pvzId uuid.UUID) *mPVZServiceMockDeleteLastProductInReception {
	if mmDeleteLastProductInReception.mock.funcDeleteLastProductInReception != nil {
		mmDeleteLastProductInReception.mock.t.Fatalf("PVZServiceMock.DeleteLastProductInReception mock is already set by Set")
	}

	if mmDeleteLastProductInReception.defaultExpectation == nil {
		mmDeleteLastProductInReception.defaultExpectation = &PVZServiceMockDeleteLastProductInReceptionExpectation{}
	}

	if mmDeleteLastProductInReception.defaultExpectation.paramPtrs != nil {
		mmDeleteLastProductInReception.mock.t.Fatalf("PVZServiceMock.DeleteLastProductInReception mock is already set by ExpectParams functions")
	}

	mmDeleteLastProductInReception.defaultExpectation.params = &PVZServiceMockDeleteLastProductInReceptionParams{ctx, pvzId}
	mmDeleteLastProductInReception.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteLastProductInReception.expectations {
		if minimock.Equal(e.params, mmDeleteLastProductInReception.defaultExpectation.params) {
			mmDeleteLastProductInReception.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteLastProductInReception.defaultExpectation.params)
		}
	}

	return mmDeleteLastProductInReception
}

// ExpectCtxParam1 sets up expected param ctx for PVZService.DeleteLastProductInReception
func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) ExpectCtxParam1(ctx context.Context) *mPVZServiceMockDeleteLastProductInReception {
	if mmDeleteLastProductInReception.mock.funcDeleteLastProductInReception != nil {
		mmDeleteLastProductInReception.mock.t.Fatalf("PVZServiceMock.DeleteLastProductInReception mock is already set by Set")
	}

	if mmDeleteLastProductInReception.defaultExpectation == nil {
		mmDeleteLastProductInReception.defaultExpectation = &PVZServiceMockDeleteLastProductInReceptionExpectation{}
	}

	if mmDeleteLastProductInReception.defaultExpectation.params != nil {
		mmDeleteLastProductInReception.mock.t.Fatalf("PVZServiceMock.DeleteLastProductInReception mock is already set by Expect")
	}

	if mmDeleteLastProductInReception.defaultExpectation.paramPtrs == nil {
		mmDeleteLastProductInReception.defaultExpectation.paramPtrs = &PVZServiceMockDeleteLastProductInReceptionParamPtrs{}
	}
	mmDeleteLastProductInReception.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteLastProductInReception.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteLastProductInReception
}

// ExpectPvzIdParam2 sets up expected param pvzId for PVZService.DeleteLastProductInReception
func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) ExpectPvzIdParam2(pvzId uuid.UUID) *mPVZServiceMockDeleteLastProductInReception {
	if mmDeleteLastProductInReception.mock.funcDeleteLastProductInReception != nil {
		mmDeleteLastProductInReception.mock.t.Fatalf("PVZServiceMock.DeleteLastProductInReception mock is already set by Set")
	}

	if mmDeleteLastProductInReception.defaultExpectation == nil {
		mmDeleteLastProductInReception.defaultExpectation = &PVZServiceMockDeleteLastProductInReceptionExpectation{}
	}

	if mmDeleteLastProductInReception.defaultExpectation.params != nil {
		mmDeleteLastProductInReception.mock.t.Fatalf("PVZServiceMock.DeleteLastProductInReception mock is already set by Expect")
	}

	if mmDeleteLastProductInReception.defaultExpectation.paramPtrs == nil {
		mmDeleteLastProductInReception.defaultExpectation.paramPtrs = &PVZServiceMockDeleteLastProductInReceptionParamPtrs{}
	}
	mmDeleteLastProductInReception.defaultExpectation.paramPtrs.pvzId = &pvzId
	mmDeleteLastProductInReception.defaultExpectation.expectationOrigins.originPvzId = minimock.CallerInfo(1)

	return mmDeleteLastProductInReception
}

// Inspect accepts an inspector function that has same arguments as the PVZService.DeleteLastProductInReception
func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) Inspect(f func(ctx context.Context, pvzId uuid.UUID)) *mPVZServiceMockDeleteLastProductInReception {
	if mmDeleteLastProductInReception.mock.inspectFuncDeleteLastProductInReception != nil {
		mmDeleteLastProductInReception.mock.t.Fatalf("Inspect function is already set for PVZServiceMock.DeleteLastProductInReception")
	}

	mmDeleteLastProductInReception.mock.inspectFuncDeleteLastProductInReception = f

	return mmDeleteLastProductInReception
}

// Return sets up results that will be returned by PVZService.DeleteLastProductInReception
func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) Return(err error) *PVZServiceMock {
	if mmDeleteLastProductInReception.mock.funcDeleteLastProductInReception != nil {
		mmDeleteLastProductInReception.mock.t.Fatalf("PVZServiceMock.DeleteLastProductInReception mock is already set by Set")
	}

	if mmDeleteLastProductInReception.defaultExpectation == nil {
		mmDeleteLastProductInReception.defaultExpectation = &PVZServiceMockDeleteLastProductInReceptionExpectation{mock: mmDeleteLastProductInReception.mock}
	}
	mmDeleteLastProductInReception.defaultExpectation.results = &PVZServiceMockDeleteLastProductInReceptionResults{err}
	mmDeleteLastProductInReception.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteLastProductInReception.mock
}

// Set uses given function f to mock the PVZService.DeleteLastProductInReception method
func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) Set(f func(ctx context.Context, pvzId uuid.UUID) (err error)) *PVZServiceMock {
	if mmDeleteLastProductInReception.defaultExpectation != nil {
		mmDeleteLastProductInReception.mock.t.Fatalf("Default expectation is already set for the PVZService.DeleteLastProductInReception method")
	}

	if len(mmDeleteLastProductInReception.expectations) > 0 {
		mmDeleteLastProductInReception.mock.t.Fatalf("Some expectations are already set for the PVZService.DeleteLastProductInReception method")
	}

	mmDeleteLastProductInReception.mock.funcDeleteLastProductInReception = f
	mmDeleteLastProductInReception.mock.funcDeleteLastProductInReceptionOrigin = minimock.CallerInfo(1)
	return mmDeleteLastProductInReception.mock
}

// When sets expectation for the PVZService.DeleteLastProductInReception which will trigger the result defined by the following
// Then helper
func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) When(ctx context.Context, pvzId uuid.UUID) *PVZServiceMockDeleteLastProductInReceptionExpectation {
	if mmDeleteLastProductInReception.mock.funcDeleteLastProductInReception != nil {
		mmDeleteLastProductInReception.mock.t.Fatalf("PVZServiceMock.DeleteLastProductInReception mock is already set by Set")
	}

	expectation := &PVZServiceMockDeleteLastProductInReceptionExpectation{
		mock:               mmDeleteLastProductInReception.mock,
		params:             &PVZServiceMockDeleteLastProductInReceptionParams{ctx, pvzId},
		expectationOrigins: PVZServiceMockDeleteLastProductInReceptionExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteLastProductInReception.expectations = append(mmDeleteLastProductInReception.expectations, expectation)
	return expectation
}

// Then sets up PVZService.DeleteLastProductInReception return parameters for the expectation previously defined by the When method
func (e *PVZServiceMockDeleteLastProductInReceptionExpectation) Then(err error) *PVZServiceMock {
	e.results = &PVZServiceMockDeleteLastProductInReceptionResults{err}
	return e.mock
}

// Times sets number of times PVZService.DeleteLastProductInReception should be invoked
func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) Times(n uint64) *mPVZServiceMockDeleteLastProductInReception {
	if n == 0 {
		mmDeleteLastProductInReception.mock.t.Fatalf("Times of PVZServiceMock.DeleteLastProductInReception mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteLastProductInReception.expectedInvocations, n)
	mmDeleteLastProductInReception.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteLastProductInReception
}

func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) invocationsDone() bool {
	if len(mmDeleteLastProductInReception.expectations) == 0 && mmDeleteLastProductInReception.defaultExpectation == nil && mmDeleteLastProductInReception.mock.funcDeleteLastProductInReception == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteLastProductInReception.mock.afterDeleteLastProductInReceptionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteLastProductInReception.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteLastProductInReception implements mm_service.PVZService
func (mmDeleteLastProductInReception *PVZServiceMock) DeleteLastProductInReception(ctx context.Context, pvzId uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmDeleteLastProductInReception.beforeDeleteLastProductInReceptionCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteLastProductInReception.afterDeleteLastProductInReceptionCounter, 1)

	mmDeleteLastProductInReception.t.Helper()

	if mmDeleteLastProductInReception.inspectFuncDeleteLastProductInReception != nil {
		mmDeleteLastProductInReception.inspectFuncDeleteLastProductInReception(ctx, pvzId)
	}

	mm_params := PVZServiceMockDeleteLastProductInReceptionParams{ctx, pvzId}

	// Record call args
	mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.mutex.Lock()
	mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.callArgs = append(mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.callArgs, &mm_params)
	mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.mutex.Unlock()

	for _, e := range mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.defaultExpectation.paramPtrs

		mm_got := PVZServiceMockDeleteLastProductInReceptionParams{ctx, pvzId}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteLastProductInReception.t.Errorf("PVZServiceMock.DeleteLastProductInReception got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pvzId != nil && !minimock.Equal(*mm_want_ptrs.pvzId, mm_got.pvzId) {
				mmDeleteLastProductInReception.t.Errorf("PVZServiceMock.DeleteLastProductInReception got unexpected parameter pvzId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.defaultExpectation.expectationOrigins.originPvzId, *mm_want_ptrs.pvzId, mm_got.pvzId, minimock.Diff(*mm_want_ptrs.pvzId, mm_got.pvzId))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteLastProductInReception.t.Errorf("PVZServiceMock.DeleteLastProductInReception got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteLastProductInReception.DeleteLastProductInReceptionMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteLastProductInReception.t.Fatal("No results are set for the PVZServiceMock.DeleteLastProductInReception")
		}
		return (*mm_results).err
	}
	if mmDeleteLastProductInReception.funcDeleteLastProductInReception != nil {
		return mmDeleteLastProductInReception.funcDeleteLastProductInReception(ctx, pvzId)
	}
	mmDeleteLastProductInReception.t.Fatalf("Unexpected call to PVZServiceMock.DeleteLastProductInReception. %v %v", ctx, pvzId)
	return
}

// DeleteLastProductInReceptionAfterCounter returns a count of finished PVZServiceMock.DeleteLastProductInReception invocations
func (mmDeleteLastProductInReception *PVZServiceMock) DeleteLastProductInReceptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteLastProductInReception.afterDeleteLastProductInReceptionCounter)
}

// DeleteLastProductInReceptionBeforeCounter returns a count of PVZServiceMock.DeleteLastProductInReception invocations
func (mmDeleteLastProductInReception *PVZServiceMock) DeleteLastProductInReceptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteLastProductInReception.beforeDeleteLastProductInReceptionCounter)
}

// Calls returns a list of arguments used in each call to PVZServiceMock.DeleteLastProductInReception.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteLastProductInReception *mPVZServiceMockDeleteLastProductInReception) Calls() []*PVZServiceMockDeleteLastProductInReceptionParams {
	mmDeleteLastProductInReception.mutex.RLock()

	argCopy := make([]*PVZServiceMockDeleteLastProductInReceptionParams, len(mmDeleteLastProductInReception.callArgs))
	copy(argCopy, mmDeleteLastProductInReception.callArgs)

	mmDeleteLastProductInReception.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteLastProductInReceptionDone returns true if the count of the DeleteLastProductInReception invocations corresponds
// the number of defined expectations
func (m *PVZServiceMock) MinimockDeleteLastProductInReceptionDone() bool {
	if m.DeleteLastProductInReceptionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteLastProductInReceptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteLastProductInReceptionMock.invocationsDone()
}

// MinimockDeleteLastProductInReceptionInspect logs each unmet expectation
func (m *PVZServiceMock) MinimockDeleteLastProductInReceptionInspect() {
	for _, e := range m.DeleteLastProductInReceptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZServiceMock.DeleteLastProductInReception at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteLastProductInReceptionCounter := mm_atomic.LoadUint64(&m.afterDeleteLastProductInReceptionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteLastProductInReceptionMock.defaultExpectation != nil && afterDeleteLastProductInReceptionCounter < 1 {
		if m.DeleteLastProductInReceptionMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZServiceMock.DeleteLastProductInReception at\n%s", m.DeleteLastProductInReceptionMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZServiceMock.DeleteLastProductInReception at\n%s with params: %#v", m.DeleteLastProductInReceptionMock.defaultExpectation.expectationOrigins.origin, *m.DeleteLastProductInReceptionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteLastProductInReception != nil && afterDeleteLastProductInReceptionCounter < 1 {
		m.t.Errorf("Expected call to PVZServiceMock.DeleteLastProductInReception at\n%s", m.funcDeleteLastProductInReceptionOrigin)
	}

	if !m.DeleteLastProductInReceptionMock.invocationsDone() && afterDeleteLastProductInReceptionCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZServiceMock.DeleteLastProductInReception at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteLastProductInReceptionMock.expectedInvocations), m.DeleteLastProductInReceptionMock.expectedInvocationsOrigin, afterDeleteLastProductInReceptionCounter)
	}
}

type mPVZServiceMockGetListPVZs struct {
	optional           bool
	mock               *PVZServiceMock
	defaultExpectation *PVZServiceMockGetListPVZsExpectation
	expectations       []*PVZServiceMockGetListPVZsExpectation

	callArgs []*PVZServiceMockGetListPVZsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZServiceMockGetListPVZsExpectation specifies expectation struct of the PVZService.GetListPVZs
type PVZServiceMockGetListPVZsExpectation struct {
	mock               *PVZServiceMock
	params             *PVZServiceMockGetListPVZsParams
	paramPtrs          *PVZServiceMockGetListPVZsParamPtrs
	expectationOrigins PVZServiceMockGetListPVZsExpectationOrigins
	results            *PVZServiceMockGetListPVZsResults
	returnOrigin       string
	Counter            uint64
}

// PVZServiceMockGetListPVZsParams contains parameters of the PVZService.GetListPVZs
type PVZServiceMockGetListPVZsParams struct {
	ctx        context.Context
	pagination *model.Filter
}

// PVZServiceMockGetListPVZsParamPtrs contains pointers to parameters of the PVZService.GetListPVZs
type PVZServiceMockGetListPVZsParamPtrs struct {
	ctx        *context.Context
	pagination **model.Filter
}

// PVZServiceMockGetListPVZsResults contains results of the PVZService.GetListPVZs
type PVZServiceMockGetListPVZsResults struct {
	ppa1 []*model.PVZWithReceptions
	err  error
}

// PVZServiceMockGetListPVZsOrigins contains origins of expectations of the PVZService.GetListPVZs
type PVZServiceMockGetListPVZsExpectationOrigins struct {
	origin           string
	originCtx        string
	originPagination string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetListPVZs *mPVZServiceMockGetListPVZs) Optional() *mPVZServiceMockGetListPVZs {
	mmGetListPVZs.optional = true
	return mmGetListPVZs
}

// Expect sets up expected params for PVZService.GetListPVZs
func (mmGetListPVZs *mPVZServiceMockGetListPVZs) Expect(ctx context.Context, pagination *model.Filter) *mPVZServiceMockGetListPVZs {
	if mmGetListPVZs.mock.funcGetListPVZs != nil {
		mmGetListPVZs.mock.t.Fatalf("PVZServiceMock.GetListPVZs mock is already set by Set")
	}

	if mmGetListPVZs.defaultExpectation == nil {
		mmGetListPVZs.defaultExpectation = &PVZServiceMockGetListPVZsExpectation{}
	}

	if mmGetListPVZs.defaultExpectation.paramPtrs != nil {
		mmGetListPVZs.mock.t.Fatalf("PVZServiceMock.GetListPVZs mock is already set by ExpectParams functions")
	}

	mmGetListPVZs.defaultExpectation.params = &PVZServiceMockGetListPVZsParams{ctx, pagination}
	mmGetListPVZs.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetListPVZs.expectations {
		if minimock.Equal(e.params, mmGetListPVZs.defaultExpectation.params) {
			mmGetListPVZs.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetListPVZs.defaultExpectation.params)
		}
	}

	return mmGetListPVZs
}

// ExpectCtxParam1 sets up expected param ctx for PVZService.GetListPVZs
func (mmGetListPVZs *mPVZServiceMockGetListPVZs) ExpectCtxParam1(ctx context.Context) *mPVZServiceMockGetListPVZs {
	if mmGetListPVZs.mock.funcGetListPVZs != nil {
		mmGetListPVZs.mock.t.Fatalf("PVZServiceMock.GetListPVZs mock is already set by Set")
	}

	if mmGetListPVZs.defaultExpectation == nil {
		mmGetListPVZs.defaultExpectation = &PVZServiceMockGetListPVZsExpectation{}
	}

	if mmGetListPVZs.defaultExpectation.params != nil {
		mmGetListPVZs.mock.t.Fatalf("PVZServiceMock.GetListPVZs mock is already set by Expect")
	}

	if mmGetListPVZs.defaultExpectation.paramPtrs == nil {
		mmGetListPVZs.defaultExpectation.paramPtrs = &PVZServiceMockGetListPVZsParamPtrs{}
	}
	mmGetListPVZs.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetListPVZs.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetListPVZs
}

// ExpectPaginationParam2 sets up expected param pagination for PVZService.GetListPVZs
func (mmGetListPVZs *mPVZServiceMockGetListPVZs) ExpectPaginationParam2(pagination *model.Filter) *mPVZServiceMockGetListPVZs {
	if mmGetListPVZs.mock.funcGetListPVZs != nil {
		mmGetListPVZs.mock.t.Fatalf("PVZServiceMock.GetListPVZs mock is already set by Set")
	}

	if mmGetListPVZs.defaultExpectation == nil {
		mmGetListPVZs.defaultExpectation = &PVZServiceMockGetListPVZsExpectation{}
	}

	if mmGetListPVZs.defaultExpectation.params != nil {
		mmGetListPVZs.mock.t.Fatalf("PVZServiceMock.GetListPVZs mock is already set by Expect")
	}

	if mmGetListPVZs.defaultExpectation.paramPtrs == nil {
		mmGetListPVZs.defaultExpectation.paramPtrs = &PVZServiceMockGetListPVZsParamPtrs{}
	}
	mmGetListPVZs.defaultExpectation.paramPtrs.pagination = &pagination
	mmGetListPVZs.defaultExpectation.expectationOrigins.originPagination = minimock.CallerInfo(1)

	return mmGetListPVZs
}

// Inspect accepts an inspector function that has same arguments as the PVZService.GetListPVZs
func (mmGetListPVZs *mPVZServiceMockGetListPVZs) Inspect(f func(ctx context.Context, pagination *model.Filter)) *mPVZServiceMockGetListPVZs {
	if mmGetListPVZs.mock.inspectFuncGetListPVZs != nil {
		mmGetListPVZs.mock.t.Fatalf("Inspect function is already set for PVZServiceMock.GetListPVZs")
	}

	mmGetListPVZs.mock.inspectFuncGetListPVZs = f

	return mmGetListPVZs
}

// Return sets up results that will be returned by PVZService.GetListPVZs
func (mmGetListPVZs *mPVZServiceMockGetListPVZs) Return(ppa1 []*model.PVZWithReceptions, err error) *PVZServiceMock {
	if mmGetListPVZs.mock.funcGetListPVZs != nil {
		mmGetListPVZs.mock.t.Fatalf("PVZServiceMock.GetListPVZs mock is already set by Set")
	}

	if mmGetListPVZs.defaultExpectation == nil {
		mmGetListPVZs.defaultExpectation = &PVZServiceMockGetListPVZsExpectation{mock: mmGetListPVZs.mock}
	}
	mmGetListPVZs.defaultExpectation.results = &PVZServiceMockGetListPVZsResults{ppa1, err}
	mmGetListPVZs.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetListPVZs.mock
}

// Set uses given function f to mock the PVZService.GetListPVZs method
func (mmGetListPVZs *mPVZServiceMockGetListPVZs) Set(f func(ctx context.Context, pagination *model.Filter) (ppa1 []*model.PVZWithReceptions, err error)) *PVZServiceMock {
	if mmGetListPVZs.defaultExpectation != nil {
		mmGetListPVZs.mock.t.Fatalf("Default expectation is already set for the PVZService.GetListPVZs method")
	}

	if len(mmGetListPVZs.expectations) > 0 {
		mmGetListPVZs.mock.t.Fatalf("Some expectations are already set for the PVZService.GetListPVZs method")
	}

	mmGetListPVZs.mock.funcGetListPVZs = f
	mmGetListPVZs.mock.funcGetListPVZsOrigin = minimock.CallerInfo(1)
	return mmGetListPVZs.mock
}

// When sets expectation for the PVZService.GetListPVZs which will trigger the result defined by the following
// Then helper
func (mmGetListPVZs *mPVZServiceMockGetListPVZs) When(ctx context.Context, pagination *model.Filter) *PVZServiceMockGetListPVZsExpectation {
	if mmGetListPVZs.mock.funcGetListPVZs != nil {
		mmGetListPVZs.mock.t.Fatalf("PVZServiceMock.GetListPVZs mock is already set by Set")
	}

	expectation := &PVZServiceMockGetListPVZsExpectation{
		mock:               mmGetListPVZs.mock,
		params:             &PVZServiceMockGetListPVZsParams{ctx, pagination},
		expectationOrigins: PVZServiceMockGetListPVZsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetListPVZs.expectations = append(mmGetListPVZs.expectations, expectation)
	return expectation
}

// Then sets up PVZService.GetListPVZs return parameters for the expectation previously defined by the When method
func (e *PVZServiceMockGetListPVZsExpectation) Then(ppa1 []*model.PVZWithReceptions, err error) *PVZServiceMock {
	e.results = &PVZServiceMockGetListPVZsResults{ppa1, err}
	return e.mock
}

// Times sets number of times PVZService.GetListPVZs should be invoked
func (mmGetListPVZs *mPVZServiceMockGetListPVZs) Times(n uint64) *mPVZServiceMockGetListPVZs {
	if n == 0 {
		mmGetListPVZs.mock.t.Fatalf("Times of PVZServiceMock.GetListPVZs mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetListPVZs.expectedInvocations, n)
	mmGetListPVZs.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetListPVZs
}

func (mmGetListPVZs *mPVZServiceMockGetListPVZs) invocationsDone() bool {
	if len(mmGetListPVZs.expectations) == 0 && mmGetListPVZs.defaultExpectation == nil && mmGetListPVZs.mock.funcGetListPVZs == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetListPVZs.mock.afterGetListPVZsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetListPVZs.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetListPVZs implements mm_service.PVZService
func (mmGetListPVZs *PVZServiceMock) GetListPVZs(ctx context.Context, pagination *model.Filter) (ppa1 []*model.PVZWithReceptions, err error) {
	mm_atomic.AddUint64(&mmGetListPVZs.beforeGetListPVZsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetListPVZs.afterGetListPVZsCounter, 1)

	mmGetListPVZs.t.Helper()

	if mmGetListPVZs.inspectFuncGetListPVZs != nil {
		mmGetListPVZs.inspectFuncGetListPVZs(ctx, pagination)
	}

	mm_params := PVZServiceMockGetListPVZsParams{ctx, pagination}

	// Record call args
	mmGetListPVZs.GetListPVZsMock.mutex.Lock()
	mmGetListPVZs.GetListPVZsMock.callArgs = append(mmGetListPVZs.GetListPVZsMock.callArgs, &mm_params)
	mmGetListPVZs.GetListPVZsMock.mutex.Unlock()

	for _, e := range mmGetListPVZs.GetListPVZsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ppa1, e.results.err
		}
	}

	if mmGetListPVZs.GetListPVZsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetListPVZs.GetListPVZsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetListPVZs.GetListPVZsMock.defaultExpectation.params
		mm_want_ptrs := mmGetListPVZs.GetListPVZsMock.defaultExpectation.paramPtrs

		mm_got := PVZServiceMockGetListPVZsParams{ctx, pagination}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetListPVZs.t.Errorf("PVZServiceMock.GetListPVZs got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetListPVZs.GetListPVZsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pagination != nil && !minimock.Equal(*mm_want_ptrs.pagination, mm_got.pagination) {
				mmGetListPVZs.t.Errorf("PVZServiceMock.GetListPVZs got unexpected parameter pagination, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetListPVZs.GetListPVZsMock.defaultExpectation.expectationOrigins.originPagination, *mm_want_ptrs.pagination, mm_got.pagination, minimock.Diff(*mm_want_ptrs.pagination, mm_got.pagination))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetListPVZs.t.Errorf("PVZServiceMock.GetListPVZs got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetListPVZs.GetListPVZsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetListPVZs.GetListPVZsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetListPVZs.t.Fatal("No results are set for the PVZServiceMock.GetListPVZs")
		}
		return (*mm_results).ppa1, (*mm_results).err
	}
	if mmGetListPVZs.funcGetListPVZs != nil {
		return mmGetListPVZs.funcGetListPVZs(ctx, pagination)
	}
	mmGetListPVZs.t.Fatalf("Unexpected call to PVZServiceMock.GetListPVZs. %v %v", ctx, pagination)
	return
}

// GetListPVZsAfterCounter returns a count of finished PVZServiceMock.GetListPVZs invocations
func (mmGetListPVZs *PVZServiceMock) GetListPVZsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetListPVZs.afterGetListPVZsCounter)
}

// GetListPVZsBeforeCounter returns a count of PVZServiceMock.GetListPVZs invocations
func (mmGetListPVZs *PVZServiceMock) GetListPVZsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetListPVZs.beforeGetListPVZsCounter)
}

// Calls returns a list of arguments used in each call to PVZServiceMock.GetListPVZs.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetListPVZs *mPVZServiceMockGetListPVZs) Calls() []*PVZServiceMockGetListPVZsParams {
	mmGetListPVZs.mutex.RLock()

	argCopy := make([]*PVZServiceMockGetListPVZsParams, len(mmGetListPVZs.callArgs))
	copy(argCopy, mmGetListPVZs.callArgs)

	mmGetListPVZs.mutex.RUnlock()

	return argCopy
}

// MinimockGetListPVZsDone returns true if the count of the GetListPVZs invocations corresponds
// the number of defined expectations
func (m *PVZServiceMock) MinimockGetListPVZsDone() bool {
	if m.GetListPVZsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetListPVZsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetListPVZsMock.invocationsDone()
}

// MinimockGetListPVZsInspect logs each unmet expectation
func (m *PVZServiceMock) MinimockGetListPVZsInspect() {
	for _, e := range m.GetListPVZsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZServiceMock.GetListPVZs at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetListPVZsCounter := mm_atomic.LoadUint64(&m.afterGetListPVZsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetListPVZsMock.defaultExpectation != nil && afterGetListPVZsCounter < 1 {
		if m.GetListPVZsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZServiceMock.GetListPVZs at\n%s", m.GetListPVZsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZServiceMock.GetListPVZs at\n%s with params: %#v", m.GetListPVZsMock.defaultExpectation.expectationOrigins.origin, *m.GetListPVZsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetListPVZs != nil && afterGetListPVZsCounter < 1 {
		m.t.Errorf("Expected call to PVZServiceMock.GetListPVZs at\n%s", m.funcGetListPVZsOrigin)
	}

	if !m.GetListPVZsMock.invocationsDone() && afterGetListPVZsCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZServiceMock.GetListPVZs at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetListPVZsMock.expectedInvocations), m.GetListPVZsMock.expectedInvocationsOrigin, afterGetListPVZsCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PVZServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddProductToReceptionInspect()

			m.MinimockCloseReceptionInspect()

			m.MinimockCreatePVZInspect()

			m.MinimockCreateReceptionInspect()

			m.MinimockDeleteLastProductInReceptionInspect()

			m.MinimockGetListPVZsInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PVZServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PVZServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddProductToReceptionDone() &&
		m.MinimockCloseReceptionDone() &&
		m.MinimockCreatePVZDone() &&
		m.MinimockCreateReceptionDone() &&
		m.MinimockDeleteLastProductInReceptionDone() &&
		m.MinimockGetListPVZsDone()
}
