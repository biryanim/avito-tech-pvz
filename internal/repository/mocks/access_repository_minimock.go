// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/biryanim/avito-tech-pvz/internal/repository.AccessRepository -o access_repository_minimock.go -n AccessRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/biryanim/avito-tech-pvz/internal/model"
	"github.com/gojuno/minimock/v3"
)

// AccessRepositoryMock implements mm_repository.AccessRepository
type AccessRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetList          func(ctx context.Context) (apa1 []*model.AccessInfo, err error)
	funcGetListOrigin    string
	inspectFuncGetList   func(ctx context.Context)
	afterGetListCounter  uint64
	beforeGetListCounter uint64
	GetListMock          mAccessRepositoryMockGetList
}

// NewAccessRepositoryMock returns a mock for mm_repository.AccessRepository
func NewAccessRepositoryMock(t minimock.Tester) *AccessRepositoryMock {
	m := &AccessRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetListMock = mAccessRepositoryMockGetList{mock: m}
	m.GetListMock.callArgs = []*AccessRepositoryMockGetListParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAccessRepositoryMockGetList struct {
	optional           bool
	mock               *AccessRepositoryMock
	defaultExpectation *AccessRepositoryMockGetListExpectation
	expectations       []*AccessRepositoryMockGetListExpectation

	callArgs []*AccessRepositoryMockGetListParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AccessRepositoryMockGetListExpectation specifies expectation struct of the AccessRepository.GetList
type AccessRepositoryMockGetListExpectation struct {
	mock               *AccessRepositoryMock
	params             *AccessRepositoryMockGetListParams
	paramPtrs          *AccessRepositoryMockGetListParamPtrs
	expectationOrigins AccessRepositoryMockGetListExpectationOrigins
	results            *AccessRepositoryMockGetListResults
	returnOrigin       string
	Counter            uint64
}

// AccessRepositoryMockGetListParams contains parameters of the AccessRepository.GetList
type AccessRepositoryMockGetListParams struct {
	ctx context.Context
}

// AccessRepositoryMockGetListParamPtrs contains pointers to parameters of the AccessRepository.GetList
type AccessRepositoryMockGetListParamPtrs struct {
	ctx *context.Context
}

// AccessRepositoryMockGetListResults contains results of the AccessRepository.GetList
type AccessRepositoryMockGetListResults struct {
	apa1 []*model.AccessInfo
	err  error
}

// AccessRepositoryMockGetListOrigins contains origins of expectations of the AccessRepository.GetList
type AccessRepositoryMockGetListExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetList *mAccessRepositoryMockGetList) Optional() *mAccessRepositoryMockGetList {
	mmGetList.optional = true
	return mmGetList
}

// Expect sets up expected params for AccessRepository.GetList
func (mmGetList *mAccessRepositoryMockGetList) Expect(ctx context.Context) *mAccessRepositoryMockGetList {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("AccessRepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &AccessRepositoryMockGetListExpectation{}
	}

	if mmGetList.defaultExpectation.paramPtrs != nil {
		mmGetList.mock.t.Fatalf("AccessRepositoryMock.GetList mock is already set by ExpectParams functions")
	}

	mmGetList.defaultExpectation.params = &AccessRepositoryMockGetListParams{ctx}
	mmGetList.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetList.expectations {
		if minimock.Equal(e.params, mmGetList.defaultExpectation.params) {
			mmGetList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetList.defaultExpectation.params)
		}
	}

	return mmGetList
}

// ExpectCtxParam1 sets up expected param ctx for AccessRepository.GetList
func (mmGetList *mAccessRepositoryMockGetList) ExpectCtxParam1(ctx context.Context) *mAccessRepositoryMockGetList {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("AccessRepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &AccessRepositoryMockGetListExpectation{}
	}

	if mmGetList.defaultExpectation.params != nil {
		mmGetList.mock.t.Fatalf("AccessRepositoryMock.GetList mock is already set by Expect")
	}

	if mmGetList.defaultExpectation.paramPtrs == nil {
		mmGetList.defaultExpectation.paramPtrs = &AccessRepositoryMockGetListParamPtrs{}
	}
	mmGetList.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetList.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetList
}

// Inspect accepts an inspector function that has same arguments as the AccessRepository.GetList
func (mmGetList *mAccessRepositoryMockGetList) Inspect(f func(ctx context.Context)) *mAccessRepositoryMockGetList {
	if mmGetList.mock.inspectFuncGetList != nil {
		mmGetList.mock.t.Fatalf("Inspect function is already set for AccessRepositoryMock.GetList")
	}

	mmGetList.mock.inspectFuncGetList = f

	return mmGetList
}

// Return sets up results that will be returned by AccessRepository.GetList
func (mmGetList *mAccessRepositoryMockGetList) Return(apa1 []*model.AccessInfo, err error) *AccessRepositoryMock {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("AccessRepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &AccessRepositoryMockGetListExpectation{mock: mmGetList.mock}
	}
	mmGetList.defaultExpectation.results = &AccessRepositoryMockGetListResults{apa1, err}
	mmGetList.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetList.mock
}

// Set uses given function f to mock the AccessRepository.GetList method
func (mmGetList *mAccessRepositoryMockGetList) Set(f func(ctx context.Context) (apa1 []*model.AccessInfo, err error)) *AccessRepositoryMock {
	if mmGetList.defaultExpectation != nil {
		mmGetList.mock.t.Fatalf("Default expectation is already set for the AccessRepository.GetList method")
	}

	if len(mmGetList.expectations) > 0 {
		mmGetList.mock.t.Fatalf("Some expectations are already set for the AccessRepository.GetList method")
	}

	mmGetList.mock.funcGetList = f
	mmGetList.mock.funcGetListOrigin = minimock.CallerInfo(1)
	return mmGetList.mock
}

// When sets expectation for the AccessRepository.GetList which will trigger the result defined by the following
// Then helper
func (mmGetList *mAccessRepositoryMockGetList) When(ctx context.Context) *AccessRepositoryMockGetListExpectation {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("AccessRepositoryMock.GetList mock is already set by Set")
	}

	expectation := &AccessRepositoryMockGetListExpectation{
		mock:               mmGetList.mock,
		params:             &AccessRepositoryMockGetListParams{ctx},
		expectationOrigins: AccessRepositoryMockGetListExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetList.expectations = append(mmGetList.expectations, expectation)
	return expectation
}

// Then sets up AccessRepository.GetList return parameters for the expectation previously defined by the When method
func (e *AccessRepositoryMockGetListExpectation) Then(apa1 []*model.AccessInfo, err error) *AccessRepositoryMock {
	e.results = &AccessRepositoryMockGetListResults{apa1, err}
	return e.mock
}

// Times sets number of times AccessRepository.GetList should be invoked
func (mmGetList *mAccessRepositoryMockGetList) Times(n uint64) *mAccessRepositoryMockGetList {
	if n == 0 {
		mmGetList.mock.t.Fatalf("Times of AccessRepositoryMock.GetList mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetList.expectedInvocations, n)
	mmGetList.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetList
}

func (mmGetList *mAccessRepositoryMockGetList) invocationsDone() bool {
	if len(mmGetList.expectations) == 0 && mmGetList.defaultExpectation == nil && mmGetList.mock.funcGetList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetList.mock.afterGetListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetList implements mm_repository.AccessRepository
func (mmGetList *AccessRepositoryMock) GetList(ctx context.Context) (apa1 []*model.AccessInfo, err error) {
	mm_atomic.AddUint64(&mmGetList.beforeGetListCounter, 1)
	defer mm_atomic.AddUint64(&mmGetList.afterGetListCounter, 1)

	mmGetList.t.Helper()

	if mmGetList.inspectFuncGetList != nil {
		mmGetList.inspectFuncGetList(ctx)
	}

	mm_params := AccessRepositoryMockGetListParams{ctx}

	// Record call args
	mmGetList.GetListMock.mutex.Lock()
	mmGetList.GetListMock.callArgs = append(mmGetList.GetListMock.callArgs, &mm_params)
	mmGetList.GetListMock.mutex.Unlock()

	for _, e := range mmGetList.GetListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.apa1, e.results.err
		}
	}

	if mmGetList.GetListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetList.GetListMock.defaultExpectation.Counter, 1)
		mm_want := mmGetList.GetListMock.defaultExpectation.params
		mm_want_ptrs := mmGetList.GetListMock.defaultExpectation.paramPtrs

		mm_got := AccessRepositoryMockGetListParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetList.t.Errorf("AccessRepositoryMock.GetList got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetList.GetListMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetList.t.Errorf("AccessRepositoryMock.GetList got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetList.GetListMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetList.GetListMock.defaultExpectation.results
		if mm_results == nil {
			mmGetList.t.Fatal("No results are set for the AccessRepositoryMock.GetList")
		}
		return (*mm_results).apa1, (*mm_results).err
	}
	if mmGetList.funcGetList != nil {
		return mmGetList.funcGetList(ctx)
	}
	mmGetList.t.Fatalf("Unexpected call to AccessRepositoryMock.GetList. %v", ctx)
	return
}

// GetListAfterCounter returns a count of finished AccessRepositoryMock.GetList invocations
func (mmGetList *AccessRepositoryMock) GetListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.afterGetListCounter)
}

// GetListBeforeCounter returns a count of AccessRepositoryMock.GetList invocations
func (mmGetList *AccessRepositoryMock) GetListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.beforeGetListCounter)
}

// Calls returns a list of arguments used in each call to AccessRepositoryMock.GetList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetList *mAccessRepositoryMockGetList) Calls() []*AccessRepositoryMockGetListParams {
	mmGetList.mutex.RLock()

	argCopy := make([]*AccessRepositoryMockGetListParams, len(mmGetList.callArgs))
	copy(argCopy, mmGetList.callArgs)

	mmGetList.mutex.RUnlock()

	return argCopy
}

// MinimockGetListDone returns true if the count of the GetList invocations corresponds
// the number of defined expectations
func (m *AccessRepositoryMock) MinimockGetListDone() bool {
	if m.GetListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetListMock.invocationsDone()
}

// MinimockGetListInspect logs each unmet expectation
func (m *AccessRepositoryMock) MinimockGetListInspect() {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AccessRepositoryMock.GetList at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetListCounter := mm_atomic.LoadUint64(&m.afterGetListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && afterGetListCounter < 1 {
		if m.GetListMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AccessRepositoryMock.GetList at\n%s", m.GetListMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AccessRepositoryMock.GetList at\n%s with params: %#v", m.GetListMock.defaultExpectation.expectationOrigins.origin, *m.GetListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && afterGetListCounter < 1 {
		m.t.Errorf("Expected call to AccessRepositoryMock.GetList at\n%s", m.funcGetListOrigin)
	}

	if !m.GetListMock.invocationsDone() && afterGetListCounter > 0 {
		m.t.Errorf("Expected %d calls to AccessRepositoryMock.GetList at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetListMock.expectedInvocations), m.GetListMock.expectedInvocationsOrigin, afterGetListCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AccessRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetListInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AccessRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AccessRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetListDone()
}
